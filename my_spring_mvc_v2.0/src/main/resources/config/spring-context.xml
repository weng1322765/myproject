<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
       default-lazy-init="true">

    <description>Spring Configuration</description>

    <!-- 开启注解处理器 -->
    <context:annotation-config/>

    <!-- 开启组件自动扫描；使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，
    在SpringMvc中只扫描@Controller注解。  -->
    <context:component-scan base-package="com"><!-- base-package 如果多个，用“,”分隔 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入属性文件 此种方式只能有一个context:property-placeholder标签-->
    <context:property-placeholder location="classpath:/config/core/db-config.properties" />
    <!--多个文件时可以使用通配符
    <context:property-placeholder location="classpath:config/core/*.properties"/>-->
    <!--又或者，选择性加载
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config/core/core-context.properties</value>
                <value>classpath:config/core/db-config.properties</value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>-->


    <!-- dataSource 配置数据源 druid连接池方式 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <!--数据库连接测试-->
        <property name="validationQuery" value="SELECT 1 from dual"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 是否缓存preparedStatement,即PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计 -->
        <property name="filters" value="stat"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描sql的xml文件 -->
        <property name="mapperLocations" value="classpath:com/dao/sql/*.xml"/>
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 多个路径用逗号分隔 -->
        <property name="basePackage" value="com.dao"/>
        <!--没有必要去指定SqlSessionFactory或SqlSessionTemplate,
        因为MapperScannerConfigurer将会创建MapperFactoryBean,之后自动装配。
        但是,如果你使用了一个以上的DataSource,那么自动装配可能会失效。这种情况下 ,
        你可以使用 sqlSessionFactoryBeanName 或 sqlSessionTemplateBeanName 属性来设置正确的 bean 名称来使用。
        这就是它如何来配置的,注意 bean 的名称是必须的,而不是 bean 的引用,因此,value 属性在这里替代通常的 ref:-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 声明 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 事务管理  举例-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--&lt;!&ndash; 对insert,create,update,modify,delete,remove 开头的方法进行事务管理,只要有异常就回滚 &ndash;&gt;-->
            <!--<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"  read-only="false"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Throwable"  read-only="false"/>-->
            <!--<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Throwable"  read-only="false"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"  read-only="false"/>-->
            <!--<tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Throwable"  read-only="false"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"  read-only="false"/>-->
            <!--<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Throwable" read-only="false"/>-->
            <!--&lt;!&ndash; find,get,select,count开头的方法,开启只读,提高数据库访问性能 &ndash;&gt;-->
            <!--<tx:method name="find*" read-only="true" />-->
            <!--<tx:method name="get*" read-only="true" />-->
            <!--<tx:method name="select*" read-only="true" />-->
            <!--<tx:method name="count*" read-only="true" />-->
            <!--&lt;!&ndash; 对其他方法 使用默认的事务管理 &ndash;&gt;-->
            <!--<tx:method name="*" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!-- 下面的事务aop配置和代理的配置都是 上面配置的事务管理要用到的 -->
    <!--<aop:config>-->
        <!--&lt;!&ndash;切点 :service包下任意方法&ndash;&gt;-->
        <!--<aop:pointcut id="serviceMethods" expression="execution(public * com.service..*(..))" />-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />-->
    <!--</aop:config>-->

    <!-- 配置使Spring采用CGLIB代理 -->
    <!-- 开启基于@AspectJ切面的注解处理器 -->
    <aop:aspectj-autoproxy proxy-target-class="true" />
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


</beans>